[{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rsi","title":"Contributing to rsi","text":"document outlines propose change rsi.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rsi","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to rsi","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to rsi","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"Permian-Global-Research/rsi\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to rsi","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rsi","text":"Please note rsi project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with rsi","title":"Getting help with rsi","text":"Thanks using rsi! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with rsi","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with rsi","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with rsi","text":"efficient possible, package development tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/articles/Downloading-data-from-STAC-APIs-using-rsi.html","id":"an-overview-of-stac-itself","dir":"Articles","previous_headings":"","what":"An overview of STAC itself","title":"Downloading data from STAC APIs using rsi","text":"can safely skip section ’re familiar STAC rstac. start downloading data, let’s talk little bit STAC. STAC , quote project’s main repository, “family specifications aim standardize way geospatial asset metadata structured queried”. STAC provides useful set standardized metadata fields, standardized ways organizing distributing data products, make lot easier data producers document share data, data consumers discover, query, access, harmonize available products. ’s amount unavoidable complexity need push actually feels easier, though. STAC introduces number new object types, standardized metadata fields behaviors. actual geospatial data want access called asset. Multiple assets share metadata – particular, share spatiotemporal extent – may grouped STAC item, multiple items share metadata may grouped STAC collection. STAC APIs expose objects internet, let users explore via HTTP requests. give concrete example: red band single Landsat image STAC asset. combined bands acquired image STAC item, combined available Landsat images STAC collection. collection included STAC API, send request list available collections, list items included Landsat collection, list assets available given item. also narrow results requests using queries – listing items inside given spatiotemporal bounding box, certain cloud cover threshold, instance. explanation simplified overview STAC family standards – instance, items may also grouped catalogs, collections catalogs may grouped collections catalogs. practical purposes however, main interest downloading data STAC APIs, simplified explanation pretty decent. instance, can see organization wild using rstac explore public STAC API. Microsoft hosts STAC API part Planetary Computer; ’ll use API rest tutorial. start downloading data, ’ll first need let rstac know STAC API want query download . , ’ll pass URL Planetary Computer STAC API rstac::stac() function: can see, output stac() RSTACQuery object, contains information HTTP query. Specifically, ’s worth highlighting object representation future HTTP query, results one ’ve already run! order actually execute requests, need use rstac::get_request() (rstac::post_request(), depending HTTP verb STAC API expecting). use get_request() query Planetary Computer STAC API, get brief description API provides: RSTACQuery object representation future query, can use functions rstac change query parameters fields actually make request. instance, can use rstac::collections() update request query /collections endpoint Planetary Computer API, lists collections available API: collections subset data sets available Planetary Computer data catalog; Planetary Computer organized collection corresponds distinct data set catalog. purposes today, ’re going querying two different collections: first, USGS Land Change Monitoring, Assessment, Projection (LCMAP) collection, provides (among things) annual land cover classifications continental United States, secondly Landsat Collection 2 Level-2 collection, provides global satellite imagery. can query items available either collection using rstac::stac_search() function. can limit search 2021 using datetime argument, ask 999 items (Planetary Computer return single request) using limit argument, search within LCMAP collection using collection’s ID usgs-lcmap-conus-v13: can see 422 items inside catalog 2021. Collectively, items contain LCMAP data continental United States 2021, item containing number assets. ’ll specifically downloading lcpri lcsec assets minute – primary secondary land cover classification layers data products. query Landsat archives, ’d just swap collections argument. ’m also going drop limit argument – way, way 1,000 Landsat images 2021, don’t need full list right now: wanted full list, pipe outputs query object rstac::items_fetch() iterate pages request. aren’t going right now – takes long time don’t need – put pin idea, later.","code":"stac_source <- rstac::stac(   \"https://planetarycomputer.microsoft.com/api/stac/v1\" ) stac_source #> ###RSTACQuery #> - url: https://planetarycomputer.microsoft.com/api/stac/v1 #> - params: #> - field(s): version, base_url, endpoint, params, verb, encode rstac::get_request(stac_source) #> ###STACCatalog #> - id: microsoft-pc #> - description:  #> Searchable spatiotemporal metadata describing Earth science datasets hosted by the Microsoft Planetary Computer #> - field(s):  #> type, id, title, description, stac_version, conformsTo, links stac_source |>   rstac::collections() |>    rstac::get_request() #> ###STACCollectionList #> - collections (122 item(s)): #>   - daymet-annual-pr #>   - daymet-daily-hi #>   - 3dep-seamless #>   - 3dep-lidar-dsm #>   - fia #>   - sentinel-1-rtc #>   - gridmet #>   - daymet-annual-na #>   - daymet-monthly-na #>   - daymet-annual-hi #>   - ... with 112 more collection(s). #> - field(s): collections, links rstac::stac_search(   q = stac_source,   collections = \"usgs-lcmap-conus-v13\",   datetime = \"2021-01-01/2021-12-31\",   limit = 999 ) |>    rstac::get_request() #> ###STACItemCollection #> - features (422 item(s)): #>   - LCMAP_CU_032003_2021_V13_CCDC #>   - LCMAP_CU_031006_2021_V13_CCDC #>   - LCMAP_CU_031004_2021_V13_CCDC #>   - LCMAP_CU_031003_2021_V13_CCDC #>   - LCMAP_CU_031002_2021_V13_CCDC #>   - LCMAP_CU_030007_2021_V13_CCDC #>   - LCMAP_CU_030006_2021_V13_CCDC #>   - LCMAP_CU_030005_2021_V13_CCDC #>   - LCMAP_CU_030004_2021_V13_CCDC #>   - LCMAP_CU_030003_2021_V13_CCDC #>   - ... with 412 more feature(s). #> - assets:  #> browse, dates, lcachg, lcachg_metadata, lcpconf, lcpconf_metadata, lcpri, lcpri_metadata, lcsconf, lcsconf_metadata, lcsec, lcsec_metadata, rendered_preview, sclast, sclast_metadata, scmag, scmag_metadata, scmqa, scmqa_metadata, scstab, scstab_metadata, sctime, sctime_metadata, tilejson #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type rstac::stac_search(   q = stac_source,   collections = \"landsat-c2-l2\",   datetime = \"2021-01-01/2021-12-31\" ) |>    rstac::get_request() #> ###STACItemCollection #> - features (250 item(s)): #>   - LC09_L2SR_088122_20211230_02_T2 #>   - LC09_L2SR_088121_20211230_02_T2 #>   - LC09_L2SR_088120_20211230_02_T2 #>   - LC09_L2SR_088119_20211230_02_T2 #>   - LC09_L2SR_088118_20211230_02_T2 #>   - LC09_L2SR_088117_20211230_02_T2 #>   - LC09_L2SR_088116_20211230_02_T2 #>   - LC09_L2SR_088115_20211230_02_T2 #>   - LC09_L2SR_088114_20211230_02_T2 #>   - LC09_L2SR_088113_20211230_02_T2 #>   - ... with 240 more feature(s). #> - assets:  #> ang, atran, blue, cdist, coastal, drad, emis, emsd, green, lwir11, mtl.json, mtl.txt, mtl.xml, nir08, qa, qa_aerosol, qa_pixel, qa_radsat, red, rendered_preview, swir16, swir22, tilejson, trad, urad #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://permian-global-research.github.io/rsi/dev/articles/Downloading-data-from-STAC-APIs-using-rsi.html","id":"downloading-data-from-stac-apis-using-rsi","dir":"Articles","previous_headings":"","what":"Downloading data from STAC APIs using rsi","title":"Downloading data from STAC APIs using rsi","text":"took us thousand words, ’ve finally reached title vignette: can actually download data API? ’ll start downloading data relatively small region; namely, North Carolina’s Ashe County. ’ll use data included sf package get county’s geometry:  … ’s prep need. can go ahead use object get_stac_data() function rsi, takes number arguments determine STAC data ’re trying get exactly want . Let’s use download primary land cover classification asset LCMAP area – lcpri asset: seconds later, ’ve got data! output get_stac_data() path data, saved raster somewhere computer; means can pass object terra::rast() terra::plot() load data R visualize :  draw Ashe county polygon top raster, can see get_stac_data() downloaded portion asset falls within bounding box provided:  wanted download one raster asset? choose pass multiple asset names asset_names. instance, wanted also download secondary land cover classification area (called lcsec), write:  Neat! Now, happens, Ashe county entirely contained inside single LCMAP tile – ’s returned API single STAC item. wanted download asset larger area, included one item? instance, wanted download assets North Carolina? , just need change aoi object nc object, specifying entire state North Carolina. Internally, get_stac_data() handle downloading relevant pieces object merging together:  wanted, parallelize downloads using future::plan(), set progress bar using progressr::handlers(). won’t use functions vignette, can extremely useful speeding monitoring larger downloads. default, merging done get_stac_data() interpolate overlapping pixels, instead simply uses value whichever pixel processed last. ’s fine , tiles shouldn’t overlap (pixel values identical ), probably isn’t ideal want combine images multiple time periods single composite. instance, want download composite available Landsat images Ashe county given month, ’d probably want calculate median value pixel, instead simply taking last value . adding composite_function = \"median\" get_stac_data() call. said, ’d probably want number things, . instance, probably don’t want include images clouds, dark shadows, composite; also probably want images subset Landsat missions, rescale bands retrieve original measurement values, forth. sounds really fiddly. reason, rsi provides function, get_landsat_imagery(), wraps get_stac_data() sets number arguments helpful default values. use following block code see exactly defaults changed: defaults make sense: can see function going downloading data Landsat-9 Landsat-8, 30 meter resolution, compositing images calculating median pixel’s measurements. ’s well good. defaults bit confusing. ’re apparently setting asset_names argument random object haven’t seen , setting STAC API’s URL, collection ’re downloading , method ’re using query API, things (including arguments look like control masking downloaded image) based attributes object? Basically, yes. load rsi, also load handful “band mapping” objects, can used control rsi functions download process data. objects organized collection data correspond , contain sub-objects different supported STAC APIs can use download data . instance, landsat_band_mapping contains information rsi can use download imagery Planetary Computer: sentinel2_band_mapping additionally contains information download data versions STAC API provided Amazon Web Services’ Open Data portal: objects called “band mapping” objects contents object explain map asset names, understood given STAC API, standardized names used Awesome Spectral Indices project. contain good bit additional information use individual STAC API, attached list attributes; include URL relevant STAC API, information query API “sign” item URLs authentication purposes, (possible) information mask low-quality pixels image. endpoint-specific information attached band mapping object, rsi can understand download mask desired product desired API based entirely asset_names argument. Changing asset_names different STAC API’s subobject automatically update arguments necessary. , way, let’s actually download composite Landsat imagery. need transform data projected coordinate reference system order compositing work, ’ll just grab imagery June 2021 order reduce number images need download. changes mind, function download Landsat imagery looks like :  can see transparent parts band pixels images June automatically masked , due value corresponding QA band. behavior happens automatically, controlled mask_band mask_function attributes band mapping object. masking pretty basic; pixels whose QA band indicates “clear lows set” accepted, others masked : can control behavior passing function mask_function argument, set argument NULL skip masking altogether. just wanted subset bands image, subset object ’s passed asset_names. instance, download band (Planetary Computer calls coastal), subset object like : last least, wanted skip compositing altogether, set composite_function argument NULL order download image spatiotemporal AOI separately:","code":"nc <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\")) ashe <- nc[1, ]  sf::st_geometry(ashe) |> plot() ashe_lcpri <- get_stac_data(   # Spatial AOI:   aoi = ashe,   # Temporal AOI:   start_date = \"2021-01-01\",   end_date = \"2021-12-31\",   # Which asset do we want, from which collection, from which API:   asset_names = \"lcpri\",   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1\",   collection = \"usgs-lcmap-conus-v13\",   # Where to save the file:   output_filename = tempfile(fileext = \".tif\") )  ashe_lcpri #> [1] \"/tmp/Rtmp6sQMaV/file1ee3415f2d24.tif\" terra::rast(ashe_lcpri) |>    terra::plot() terra::rast(ashe_lcpri) |>    terra::plot() terra::plot(terra::vect(ashe), add = TRUE, col = \"red\") get_stac_data(   aoi = ashe,   start_date = \"2021-01-01\",   end_date = \"2021-12-31\",   asset_names = c(\"lcpri\", \"lcsec\"), # this is the only change!   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1\",   collection = \"usgs-lcmap-conus-v13\",   output_filename = tempfile(fileext = \".tif\") ) |>    terra::rast() |>    terra::plot() get_stac_data(   aoi = nc, # this is the only change!   start_date = \"2021-01-01\",   end_date = \"2021-12-31\",   asset_names = c(\"lcpri\", \"lcsec\"),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1\",   collection = \"usgs-lcmap-conus-v13\",   output_filename = tempfile(fileext = \".tif\") ) |>    terra::rast() |>    terra::plot() # Get the arguments, and default values, from  # get_stac_data and get_landsat_imagery gsd_formals <- formals(get_stac_data) gli_formals <- formals(get_landsat_imagery)  # Drop empty arguments gsd_formals <- gsd_formals[vapply(gsd_formals, class, character(1)) != \"name\"] gli_formals <- gli_formals[vapply(gli_formals, class, character(1)) != \"name\"]  # Highlight changed default values setdiff(gli_formals, gsd_formals) #> $platforms #> c(\"landsat-9\", \"landsat-8\") #>  #> $pixel_x_size #> [1] 30 #>  #> $asset_names #> rsi::landsat_band_mapping$planetary_computer_v1 #>  #> $stac_source #> attr(asset_names, \"stac_source\") #>  #> $collection #> attr(asset_names, \"collection_name\") #>  #> $query_function #> attr(asset_names, \"query_function\") #>  #> $sign_function #> attr(asset_names, \"sign_function\") #>  #> $mask_band #> attr(asset_names, \"mask_band\") #>  #> $mask_function #> attr(asset_names, \"mask_function\") #>  #> $composite_function #> [1] \"median\" landsat_band_mapping #> $planetary_computer_v1 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function sign_function class #>  #> coastal    blue   green     red   nir08  swir16  swir22    lwir  lwir11  #>     \"A\"     \"B\"     \"G\"     \"R\"     \"N\"    \"S1\"    \"S2\"     \"T\"    \"T1\" sentinel2_band_mapping #> $aws_v0 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function class #>  #>   B01   B02   B03   B04   B05   B06   B07   B08   B8A   B09   B11   B12  #>   \"A\"   \"B\"   \"G\"   \"R\" \"RE1\" \"RE2\" \"RE3\"   \"N\"  \"N2\"  \"WV\"  \"S1\"  \"S2\"  #>  #> $aws_v1 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function class #>  #>     blue  coastal    green      nir    nir08    nir09      red rededge1  #>      \"B\"      \"A\"      \"G\"      \"N\"     \"N2\"     \"WV\"      \"R\"    \"RE1\"  #> rededge2 rededge3   swir16   swir22  #>    \"RE2\"    \"RE3\"     \"S1\"     \"S2\"  #>  #> $planetary_computer_v1 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function class scl_name sign_function #>  #>   B01   B02   B03   B04   B05   B06   B07   B08   B8A   B09   B11   B12  #>   \"A\"   \"B\"   \"G\"   \"R\" \"RE1\" \"RE2\" \"RE3\"   \"N\"  \"N2\"  \"WV\"  \"S1\"  \"S2\" projected_ashe <- sf::st_transform(ashe, 6542) get_landsat_imagery(   aoi = projected_ashe,   start_date = \"2021-06-01\",   end_date = \"2021-06-30\",   output_filename = tempfile(fileext = \".tif\") ) |>    terra::rast() |>    terra::plot() attr(landsat_band_mapping$planetary_computer_v1, \"mask_band\") #> [1] \"qa_pixel\" attr(landsat_band_mapping$planetary_computer_v1, \"mask_function\") #> function (raster)  #> { #>     raster == 21824 #> } #> <bytecode: 0x55acab5269c0> #> <environment: namespace:rsi> landsat_band_mapping$planetary_computer_v1[\"coastal\"] #> An rsi band mapping object with attributes: #> mask_band mask_function stac_source collection_name query_function sign_function class names #>  #> coastal  #>     \"A\" get_landsat_imagery(   aoi = projected_ashe,   start_date = \"2021-06-01\",   end_date = \"2021-06-30\",   output_filename = tempfile(fileext = \".tif\"),   composite_function = NULL,   mask_function = NULL # otherwise half of these images are blank ) |>    lapply(terra::rast) |>    lapply(terra::plot) |>    invisible() #> Warning: `mask_function` was NULL, but `mask_band` was not `NULL`. #> ℹ `mask_band` will be ignored (not downloaded or used)."},{"path":"https://permian-global-research.github.io/rsi/dev/articles/Downloading-data-from-STAC-APIs-using-rsi.html","id":"using-cql2-to-refine-queries-to-stac-apis","dir":"Articles","previous_headings":"","what":"Using CQL2 to refine queries to STAC APIs","title":"Downloading data from STAC APIs using rsi","text":"last section tutorial focuses using CQL2 within rsi filter items downloaded. aren’t familiar using CQl2 rstac, go read corresponding tutorial adapted first; tutorial assumes understand rstac::ext_filter() already. end tutorial, written relatively complex filters using rstac CQL2. instance, wanted find Landsat images: June 2021, covering Ashe county, Landsat-8, less 50% cloud cover, write filter looks something like : heck use query inside get_stac_data() friends? Well, default rsi uses query function called default_query_function(). function exported, means can see source code calling function without parentheses: relatively straightforward function – composes datetime start date end date, uses rstac get list relevant items spatiotemporal bounding box (making sure use items_fetch() retrieve pages results – told come later!). works STAC APIs, want perform complicated query can provide custom query function place. instance, perform CQL2 query , can effectively copy paste code new query function pass get_landsat_imagery():  know express desired query CQL2, can write arbitrarily complex functions make sure ’re downloading precise data ’re interested .","code":"geometry <- ashe |>    sf::st_transform(4326) |>    sf::st_bbox() |>    rstac::cql2_bbox_as_geojson() datetime <- rstac::cql2_interval(\"2021-06-01\", \"2021-06-30\")  rstac::stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") |>   rstac::ext_filter(     collection == \"landsat-c2-l2\" &&       t_intersects(datetime, {{datetime}}) &&       s_intersects(geometry, {{geometry}}) &&        platform == \"landsat-8\" &&        `eo:cloud_cover` < 50   ) |>   rstac::post_request() #> ###STACItemCollection #> - features (1 item(s)): #>   - LC08_L2SP_017035_20210628_02_T1 #> - assets:  #> ang, atran, blue, cdist, coastal, drad, emis, emsd, green, lwir11, mtl.json, mtl.txt, mtl.xml, nir08, qa, qa_aerosol, qa_pixel, qa_radsat, red, rendered_preview, swir16, swir22, tilejson, trad, urad #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type default_query_function #> function (bbox, stac_source, collection, start_date, end_date,  #>     limit, ...)  #> { #>     if (!is.null(start_date)) { #>         datetime <- paste0(start_date, \"/\", end_date) #>     } #>     else { #>         datetime <- NULL #>     } #>     items <- rstac::stac_search(rstac::stac(stac_source), collections = collection,  #>         bbox = c(bbox[\"xmin\"], bbox[\"ymin\"], bbox[\"xmax\"], bbox[\"ymax\"]),  #>         datetime = datetime, limit = limit) #>     items <- rstac::items_fetch(rstac::get_request(items)) #>     items #> } #> <bytecode: 0x55aca93c3ea0> #> <environment: namespace:rsi> custom_query_function <- function(bbox,                                    stac_source,                                    collection,                                    start_date,                                    end_date,                                    limit,                                    ...) {   # `bbox` is guaranteed to be in 4326 already   geometry <- rstac::cql2_bbox_as_geojson(bbox)    # `start_date` and `end_date` will be processed    # and so hopefully will be in RFC-3339 formats   datetime <- rstac::cql2_interval(start_date, end_date)      request <- rstac::ext_filter(     rstac::stac(stac_source),     collection == {{collection}} && # I could have left this hard-coded!       t_intersects(datetime, {{datetime}}) &&       s_intersects(geometry, {{geometry}}) &&        platform == \"landsat-8\" &&        `eo:cloud_cover` < 50   )   rstac::items_fetch(rstac::post_request(request)) }  get_landsat_imagery(   aoi = projected_ashe,   start_date = \"2021-06-01\",   end_date = \"2021-06-30\",   output_filename = tempfile(fileext = \".tif\"),   query_function = custom_query_function ) |>    terra::rast() |>    terra::plot()"},{"path":"https://permian-global-research.github.io/rsi/dev/articles/Downloading-data-from-STAC-APIs-using-rsi.html","id":"a-quick-note-on-rsi-and-other-packages-for-downloading-stac-assets","dir":"Articles","previous_headings":"","what":"A quick note on rsi and other packages for downloading STAC assets","title":"Downloading data from STAC APIs using rsi","text":"rsi nearly package aiming help R users take advantage STAC APIs build cloud-native geospatial workflows. shown , rsi fundamentally built top excellent rstac package, think fantastic tool interactively exploring STAC APIs well building executing queries. hope rsi can provide useful layer abstraction rstac efficiently downloading assets performing common rescaling, masking, compositing tasks involved standard data processing workflows. also several packages also implement workflows efficiently accessing processing data STAC endpoints, among gdalcubes sits packages. core difference rsi packages rsi data model: rsi focused entirely finding bits data want remote endpoints, getting bits local machine process normal spatial data tooling. new classes rsi (band mapping objects), outputs functions local rasters. approach fits better head abstract delayed computations packages; time, ’s possible approach can less efficient, downloading data finer resolutions actually needed given task. result, users need make sure ’re requesting data actually need.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Mahoney. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahoney M (2024). rsi: Efficiently Retrieve Process Satellite Imagery. R package version 0.1.0.9000, https://permian-global-research.github.io/rsi/, https://github.com/Permian-Global-Research/rsi.","code":"@Manual{,   title = {rsi: Efficiently Retrieve and Process Satellite Imagery},   author = {Michael Mahoney},   year = {2024},   note = {R package version 0.1.0.9000, https://permian-global-research.github.io/rsi/},   url = {https://github.com/Permian-Global-Research/rsi}, }"},{"path":"https://permian-global-research.github.io/rsi/dev/index.html","id":"rsi-","dir":"","previous_headings":"","what":"Efficiently Retrieve and Process Satellite Imagery","title":"Efficiently Retrieve and Process Satellite Imagery","text":"goal rsi address several repeated spatial infelicities, providing utility functions save typing help avoid repetitive stress injuries. Specifically, rsi provides: interface Rsome – excuse , Awesome Spectral Indices project, providing list indices directly R friendly tibble, method efficiently calculating awesome spectral indices using local rasters, enabling rapid spectral inference, method downloading STAC data – excuse , retriving STAC information – STAC server, additional helpers downloading Landsat, Sentinel-1, Sentinel-2 data free public STAC servers providing rapid satellite imagery, raster stack integration method combining multiple rasters containing distinct data sets single raster stack.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficiently Retrieve and Process Satellite Imagery","text":"can install rsi via: can install development version rsi GitHub : , use pak:","code":"install.packages(\"rsi\") install.packages(   'rsi',    repos = c(     'https://mikemahoney218.r-universe.dev',      'https://cloud.r-project.org'   ) ) # install.packages(\"pak\") pak::pak(\"Permian-Global-Research/rsi\")"},{"path":"https://permian-global-research.github.io/rsi/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Efficiently Retrieve and Process Satellite Imagery","text":"spectral_indices() function provides tibble data Awesome Spectral Indices project: first time spectral_indices() called download --date version spectral indices JSON file, write resulting table cache file tools::R_user_dir(\"rsi\"). , spectral_indices() download new file cache older 1 day, update_cache argument TRUE, order provide --date data quickly possible. offline, spectral_indices() always fall back cache , cache file exists, (possibly --date) data file included rsi . Separately, get_stac_data() function provides generic interface downloading composite images accessible STAC catalog. instance, download cloud-masked composite Landsat’s visible layers using get_stac_data() helper functions rsi:  common use cases, however, rsi also provides helper functions provide arguments . instance, get_stac_data() call simple :  default, functions download data Microsoft’s Planetary Computer API, using number configuration options set rsi_band_mapping objects provided package. can see default configuration options printing band mapping objects, can adjust arguments get_* function package. can put pieces together calculate many spectral indices can based downloaded Landsat imagery. calculate_indices() function, well, calculates indices, using subsets spectral_indices() data frame:  last least, rsi includes utility efficiently combining rasters containing different data location VRT, allows programs like GDAL treat separate data sources single file. instance, can combine Landsat imagery derived indices:  can extremely useful way create predictor bricks multi-band rasters various data sources.","code":"library(rsi)  spectral_indices() #> # A tibble: 231 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 221 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 1000)  landsat_image <- get_stac_data(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-06-30\",   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = c(\"red\", \"blue\", \"green\"),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"landsat-c2-l2\",   mask_band = \"qa_pixel\",   mask_function = landsat_mask_function,   output_filename = tempfile(fileext = \".tif\"),   item_filter_function = landsat_platform_filter,   platforms = c(\"landsat-9\", \"landsat-8\") )  terra::plot(terra::rast(landsat_image)) landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   output_filename = tempfile(fileext = \".tif\") ) terra::plot(terra::rast(landsat_image)) landsat_band_mapping$planetary_computer_v1 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function sign_function class #>  #> coastal    blue   green     red   nir08  swir16  swir22    lwir  lwir11  #>     \"A\"     \"B\"     \"G\"     \"R\"     \"N\"    \"S1\"    \"S2\"     \"T\"    \"T1\" available_indices <- filter_bands(   bands = names(terra::rast(landsat_image)) )  indices <- calculate_indices(   landsat_image,   available_indices,   output_filename = tempfile(fileext = \".tif\") ) #> |---------|---------|---------|---------|=========================================                                            # Plot the first handful of spatial indices terra::plot(terra::rast(indices)) raster_stack <- stack_rasters(   c(landsat_image, indices),   tempfile(fileext = \".vrt\") )  # The first few panels are now Landsat measurements, not indices: terra::plot(terra::rast(raster_stack))"},{"path":"https://permian-global-research.github.io/rsi/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Efficiently Retrieve and Process Satellite Imagery","text":"Copyright 2023 Permian Global Research, Limited. Licensed Apache License, Version 2.0 (“License”); may use file except compliance License. may obtain copy License : https://www.apache.org/licenses/LICENSE-2.0 Unless required applicable law agreed writing, software distributed License distributed “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied. See License specific language governing permissions limitations License.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate indices from the bands of a raster — calculate_indices","title":"Calculate indices from the bands of a raster — calculate_indices","text":"function computes number indices input raster via terra::predict(). default, function designed work subsets spectral_indices(), work data frame formula, bands, short_name column.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate indices from the bands of a raster — calculate_indices","text":"","code":"calculate_indices(raster, indices, output_filename, ..., names_suffix = NULL)"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate indices from the bands of a raster — calculate_indices","text":"raster raster (either SpatRaster object readable terra::rast()) compute indices . indices data frame indices compute. intent function work subsets spectral_indices, data frame columns formula (containing string representation equation used calculate index), bands (list column containing character vectors necessary bands) short_name (used band name) work. output_filename filename write computed metrics . ... dots future extensions must empty. names_suffix NULL, used (paste()) add suffix band names returned.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate indices from the bands of a raster — calculate_indices","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":"security","dir":"Reference","previous_headings":"","what":"Security","title":"Calculate indices from the bands of a raster — calculate_indices","text":"Note function running code formula column spectral indices data frame, derived JSON file downloaded internet. impossible attacker take advantage run arbitrary code computer. mitigate , indices calculated minimal environment contains functions symbols (preventing attacker accessing, example, system()). Still, good practice inspect formula column make sure nothing nasty hiding formulas going run. Additionally, consider using pre-saved indices tables spectral_indices(download_indices = FALSE) using unsupervised workload.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/calculate_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate indices from the bands of a raster — calculate_indices","text":"","code":"calculate_indices(   system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\"),   filter_platforms(platforms = \"Sentinel-1 (Dual Polarisation VV-VH)\"),   tempfile(fileext = \".tif\"),   names_suffix = \"sentinel1\" ) #> Warning: No cache file present and `download_indices` set to `FALSE`. #> ℹ Returning (likely outdated) package data instead. #> [1] \"/tmp/Rtmp0jKhDJ/file1b864cf412ee.tif\"  # Formulas aren't able to access most R functions or operators: example_indices <- filter_platforms(platforms = \"Sentinel-1 (Dual Polarisation VV-VH)\")[1, ] example_indices$formula <- 'system(\"echo something bad\")' try(   calculate_indices(     system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\"),     example_indices,     tempfile(fileext = \".tif\")   ) ) #> Error in system(\"echo something bad\") : could not find function \"system\""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"function default method used retrieve lists items download collections endpoints supported rsi. likely work STAC APIs interest.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"","code":"default_query_function(   bbox,   stac_source,   collection,   start_date,   end_date,   limit,   ... )"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"bbox sfc object representing spatial bounding box area interest. must EPSG:4326 coordinates (, function called within get_stac_data(), ) stac_source Character length 1: STAC URL download imagery . collection Character length 1: STAC collection download images . start_date, end_date Character strings length 1 representing boundaries temporal range interest, RFC-3339 format. Set either argument .. use open interval; set start_date NULL pass temporal range interest (may cause errors APIs). function called within get_stac_data(), inputs start_date end_date already processed try force RFC-3339 compliance. limit integer defining maximum number results return. informed, defaults service implementation. ... Ignored function. Arguments passed get_stac_data() via ... available (unchanged) function","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"StacItemCollection object.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"can pass query functions get_stac_data() variants. best way perform complex queries, instance need provide authentication get list items (just assets) available AOI, perform cloud filtering prior downloading assets.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/default_query_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query a STAC API using a specific spatiotemporal area of interest — default_query_function","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   query_function = default_query_function ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/dem_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Landsat band mapping — dem_band_mapping","title":"Landsat band mapping — dem_band_mapping","text":"object structured slightly differently band mapping objects; list named lists, whose names correspond DEM collections available within given STAC catalog. named lists standard band mapping objects, containing character vectors names corresponding asset names values equal elevation.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/dem_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landsat band mapping — dem_band_mapping","text":"","code":"dem_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/dem_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landsat band mapping — dem_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/dem_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landsat band mapping — dem_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter indices based on (relatively) complicated fields — filter_platforms","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"Filter indices based (relatively) complicated fields","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"","code":"filter_platforms(   indices = spectral_indices(),   platforms = unique(unlist(spectral_indices(download_indices = FALSE, update_cache =     FALSE)$platforms)),   operand = c(\"all\", \"any\") )  filter_bands(   indices = spectral_indices(),   bands = unique(unlist(spectral_indices(download_indices = FALSE, update_cache =     FALSE)$bands)),   operand = c(\"all\", \"any\"),   type = c(\"filter\", \"search\") )"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"indices data frame filter. Must contain relevant column. platforms, bands Names instruments (platforms) spectra (bands) indices must contain. operand function defining apply filter. instance, operand = means index must contain platforms bands provided, operand = means index must contain least one platforms bands provided. type type query ? filter, indices returned /bands use (depending operand) bands. search, indices returned /bands bands use.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"filtered version indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"","code":"filter_platforms(platforms = \"Sentinel-2\") #> # A tibble: 198 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 188 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> filter_platforms(platforms = c(\"Landsat-OLI\", \"Sentinel-2\")) #> # A tibble: 158 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  5 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  6 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  7 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #>  8 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #>  9 burn               <chr [2]> https://gith… 2021-04-07       1.0 / … Burned A… #> 10 burn               <chr [2]> https://gith… 2022-04-20       1.0/((… Burned A… #> # ℹ 148 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> filter_bands(bands = c(\"R\", \"N\"), operand = any) #> # A tibble: 176 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  5 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  6 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  7 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  8 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #>  9 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> 10 burn               <chr [2]> https://gith… 2021-04-07       1.0 / … Burned A… #> # ℹ 166 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr>"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve raster data from STAC endpoints — get_stac_data","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"functions retrieve raster data STAC endpoints optionally create composite data sets multiple files. get_stac_data() generic function able download raster data variety data sources, helper functions useful defaults downloading common data sets standard STAC sources.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"","code":"get_stac_data(   aoi,   start_date,   end_date,   pixel_x_size = NULL,   pixel_y_size = NULL,   asset_names,   stac_source,   collection,   ...,   query_function = default_query_function,   sign_function = NULL,   rescale_bands = TRUE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = c(\"merge\", \"median\", \"mean\", \"sum\", \"min\", \"max\"),   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_sentinel1_imagery(   aoi,   start_date,   end_date,   ...,   pixel_x_size = 10,   pixel_y_size = 10,   asset_names = rsi::sentinel1_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_sentinel2_imagery(   aoi,   start_date,   end_date,   ...,   pixel_x_size = 10,   pixel_y_size = 10,   asset_names = rsi::sentinel2_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = attr(asset_names, \"mask_band\"),   mask_function = attr(asset_names, \"mask_function\"),   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_landsat_imagery(   aoi,   start_date,   end_date,   ...,   platforms = c(\"landsat-9\", \"landsat-8\"),   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = rsi::landsat_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = TRUE,   item_filter_function = landsat_platform_filter,   mask_band = attr(asset_names, \"mask_band\"),   mask_function = attr(asset_names, \"mask_function\"),   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_dem(   aoi,   ...,   start_date = NULL,   end_date = NULL,   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = rsi::dem_band_mapping$planetary_computer_v1$`cop-dem-glo-30`,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"max\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"aoi sf(c) object outlining area interest get imagery . used get bounding box used calculating metrics output data's CRS. start_date, end_date Character length 1: first last date, respectively, imagery include metrics calculations. YYYY-MM-DD format. pixel_x_size, pixel_y_size Numeric length 1: size pixels x-direction (longitude / easting) y-direction (latitude / northing). asset_names names assets download. vector names, names vector assumed names assets STAC server, renamed elements vector final output. stac_source Character length 1: STAC URL download imagery . collection Character length 1: STAC collection download images . ... Passed item_filter_function. query_function function takes output rstac::stac_search() executes request. See default_query_function() query_function slots sentinel1_band_mapping, sentinel2_band_mapping, landsat_band_mapping. sign_function function takes output query_function signs item URLs, necessary. rescale_bands Logical length 1: STAC collection implements raster STAC extension, extension includes scale offset values, function attempt automatically rescale downloaded data? item_filter_function function takes outputs query_function (usually STACItemCollection) ... returns filtered STACItemCollection. used, example, download images specific Landsat platforms. mask_band Character length 1: name asset STAC source use mask data. Set NULL mask. See mask_band slots sentinel1_band_mapping, sentinel2_band_mapping, landsat_band_mapping. mask_function function takes raster returns boolean raster, TRUE pixels preserved FALSE NA pixels masked . See sentinel2_mask_function(). output_filename filename write output raster . composite_function NULL, item datetimes appended order create unique filenames. items datetimes, sequential ID appended instead. composite_function Character length 1: name function used combine downloaded images single composite (.e., aggregate pixel values multiple images single value). Must one \"sum\", \"mean\", \"median\", \"min\", \"max\". Set NULL composite (.e., rescale save individual file independently). limit integer defining maximum number results return. informed, defaults service implementation. gdalwarp_options Options passed gdalwarp options argument sf::gdal_utils(). set options used downloaded data final output images; means common options (instance, PREDICTOR=3) may cause errors bands varying data types. gdal_config_options Options passed gdalwarp config_options argument sf::gdal_utils(). platforms names Landsat satellites download imagery . correspond platforms column spectral_indices(); default argument c(\"landsat-9\", \"landsat-8\") corresponds Landsat-OLI value column.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"usage-tips","dir":"Reference","previous_headings":"","what":"Usage Tips","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"often useful buffer aoi object slightly, order 1-2 cell widths, order ensure data downloaded entire AOI even accounting reprojection needed compare AOI data STAC server. functions allow parallelizing downloads via future::plan(), user-controlled progress updates via progressr::handlers(). fewer images download asset_names, function uses lapply() iterate images future.apply::future_mapply() iterate downloading asset. images assets, function uses future.apply::future_lapply() iterate images.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"downloading-from-planetary-computer","dir":"Reference","previous_headings":"","what":"Downloading from Planetary Computer","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"Certain data sets Planetary Computer require providing subscription key. Even non-protected data sets, providing subscription key grants higher rate limits faster downloads. , good idea request Planetary Computer account, generate subscription key. set rsi_pc_key environment variable key (either primary secondary; difference), rsi automatically use key sign requests Planetary Computer. currently challenges certain Landsat images Planetary Computer; please see https://github.com/microsoft/PlanetaryComputer/discussions/101 information images current status. files may cause data downloads fail.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"compositing","dir":"Reference","previous_headings":"","what":"Compositing","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"function can either download data intersects spatiotemporal AOI multiple files (composite_function = NULL), can used rescale band values, apply mask function, create composite resulting files single function call. steps can skipped passing NULL corresponding argument. Masks applied downloaded asset separately. Rescaling applied final composite images combined. number steps involved creating composites -- rescaling band values, running mask function, masking images, compositing images -- currently rely terra package raster calculations. means creating larger composites, either geographic temporal dimension, may cause errors. can good idea tile aoi using sf::st_make_grid() iterate tiles avoid errors (make easier interrupt restart download job).","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"rescaling","dir":"Reference","previous_headings":"","what":"Rescaling","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"rescale_bands TRUE, function able use scale offset values bands field raster STAC extension. implemented originally work Landsat collections Planetary Computer STAC catalogue, hopefully work automatically data sources well. Note Sentinel-2 data typically use STAC extension, returned data typically re-scaled; divide downloaded band values 10000 get reflectance values expected values.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"sentinel-data","dir":"Reference","previous_headings":"","what":"Sentinel-1 Data","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"get_sentinel1_data() function designed download Sentinel-1 data Microsoft Planetary Computer STAC API. GRD RTC Sentinel-1 collections supported. download RTC data, set collection sentinel-1-rtc, supply subscription key environment variable named rsi_pc_key (, e.g., Sys.setenv() .Renviron file).","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/get_stac_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve raster data from STAC endpoints — get_stac_data","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  get_stac_data(aoi,   start_date = \"2022-06-01\",   end_date = \"2022-06-30\",   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = c(     \"red\", \"blue\", \"green\"   ),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"landsat-c2-l2\",   query_function = default_query_function,   sign_function = sign_planetary_computer,   mask_band = \"qa_pixel\",   mask_function = landsat_mask_function,   item_filter_function = landsat_platform_filter,   platforms = c(\"landsat-9\", \"landsat-8\") )  # or, mostly equivalently (will download more bands): landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\" ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Landsat band mapping — landsat_band_mapping","title":"Landsat band mapping — landsat_band_mapping","text":"object named list character vectors, names corresponding Landsat band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landsat band mapping — landsat_band_mapping","text":"","code":"landsat_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landsat band mapping — landsat_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landsat band mapping — landsat_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_mask_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Landsat mask raster from the QA band — landsat_mask_function","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"Create Landsat mask raster QA band","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_mask_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"","code":"landsat_mask_function(raster)"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_mask_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"raster QA band Landsat image","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_mask_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"boolean raster used mask Landsat image","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_mask_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   mask_function = landsat_mask_function ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_platform_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Landsat features to only specific platforms — landsat_platform_filter","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"Filter Landsat features specific platforms","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_platform_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"","code":"landsat_platform_filter(items, platforms)"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_platform_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"items STACItemCatalog containing number features platforms vector acceptable platforms, instance landsat-9. Note refers satellite names, platforms spectral_indices().","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_platform_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"STACItemCollection.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/landsat_platform_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   item_filter_function = landsat_platform_filter ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/rsi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rsi: Efficiently Retrieve and Process Satellite Imagery — rsi-package","title":"rsi: Efficiently Retrieve and Process Satellite Imagery — rsi-package","text":"Downloads spatial data spatiotemporal asset catalogs ('STAC'), computes standard spectral indices Awesome Spectral Indices project (Montero et al. (2023) doi:10.1038/s41597-023-02096-0 ) raster data, glues outputs together predictor bricks. Methods focus interoperability broader spatial ecosystem; function arguments outputs use classes 'sf' 'terra', data downloading functions support complex 'CQL2' queries using 'rstac'.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/rsi/dev/reference/rsi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rsi: Efficiently Retrieve and Process Satellite Imagery — rsi-package","text":"Maintainer: Michael Mahoney mike.mahoney.218@gmail.com (ORCID) contributors: Permian Global [copyright holder, funder]","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel1_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Sentinel-1 band mapping — sentinel1_band_mapping","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"object named list character vectors, names corresponding Sentinel-1 band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel1_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"","code":"sentinel1_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel1_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel1_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Sentinel-2 band mapping — sentinel2_band_mapping","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"object named list character vectors, names corresponding Sentinel-2 band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"","code":"sentinel2_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"object class list length 3.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_mask_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"Create Sentinel-2 mask raster SCL band","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_mask_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"","code":"sentinel2_mask_function(raster)"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_mask_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"raster SCL band Sentinel-2 image","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_mask_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"boolean raster used mask Sentinel-2 image","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sentinel2_mask_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  sentinel2_image <- get_sentinel2_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   mask_function = sentinel2_mask_function ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sign_planetary_computer.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","title":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","text":"Sign STAC items retrieved Planetary Computer","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sign_planetary_computer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","text":"","code":"sign_planetary_computer(items, subscription_key = Sys.getenv(\"rsi_pc_key\"))"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sign_planetary_computer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","text":"items STACItemCollection, returned default_query_function. subscription_key Optionally, subscription key associated Planetary Computer account. time writing, required downloading Sentinel 1 RTC products, well NAIP imagery. key automatically used environment variable rsi_pc_key set.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sign_planetary_computer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","text":"STACItemCollection object signed assets url.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/sign_planetary_computer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign STAC items retrieved from the Planetary Computer — sign_planetary_computer","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   sign_function = sign_planetary_computer ) }"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of spectral indices — spectral_indices","title":"Get a data frame of spectral indices — spectral_indices","text":"function returns data frame spectral indices, awesome-spectral-indices repository.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of spectral indices — spectral_indices","text":"","code":"spectral_indices(   ...,   url = spectral_indices_url(),   download_indices = NULL,   update_cache = NULL )"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a data frame of spectral indices — spectral_indices","text":"https://github.com/awesome-spectral-indices/awesome-spectral-indices","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame of spectral indices — spectral_indices","text":"... dots future extensions must empty. url URL download spectral indices . option rsi_url set, value used; otherwise, environment variable rsi_url set, value used; otherwise, list https://github.com/awesome-spectral-indices/awesome-spectral-indices used. download_indices Logical: function download indices? NULL, function download indices cache updated. TRUE, function attempt download indices matter . FALSE, either cached package indices used. update_cache Logical: cached indices updated? NULL, cached values updated cache older day. TRUE, cache updated, FALSE .","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of spectral indices — spectral_indices","text":"tibble::tibble nine columns, containing information spectral indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of spectral indices — spectral_indices","text":"","code":"spectral_indices() #> # A tibble: 231 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 221 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr>"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the URL to download spectral indices from — spectral_indices_url","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"Get URL download spectral indices ","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"","code":"spectral_indices_url()"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"URL download indices .","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/spectral_indices_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"","code":"spectral_indices_url() #> [1] \"https://raw.githubusercontent.com/awesome-spectral-indices/awesome-spectral-indices/main/output/spectral-indices-dict.json\""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/stack_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and save a multi-band output raster by combining input rasters — stack_rasters","title":"Create and save a multi-band output raster by combining input rasters — stack_rasters","text":"function creates output raster \"stacks\" bands input rasters, though loaded one another GIS. first constructing GDAL virtual raster, \"VRT\", optionally uses GDAL's warper convert VRT standalone file. VRT fast create require much space, require input rasters moved altered. Creating standalone raster file may take long time large amount disk space.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/stack_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and save a multi-band output raster by combining input rasters — stack_rasters","text":"","code":"stack_rasters(   rasters,   output_filename,   ...,   resolution,   extent,   reference_raster = 1,   resampling_method = \"bilinear\",   band_names,   gdalwarp_options = c(\"-multi\", \"-overwrite\", \"-co\", \"COMPRESS=DEFLATE\", \"-co\",     \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )"},{"path":"https://permian-global-research.github.io/rsi/dev/reference/stack_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and save a multi-band output raster by combining input rasters — stack_rasters","text":"rasters list rasters combine single multi-band raster, either SpatRaster objects terra::rast() character file paths files can read terra::rast(). Rasters \"stacked\" upon one another, preserving values. must share CRS. output_filename location save final \"stacked\" raster. filename \"vrt\" extension determined tools::file_ext(), function exits creating VRT; otherwise, function create VRT use sf::gdal_utils(\"warp\") convert VRT another format. ... dots future extensions must empty. resolution Numeric length 2, representing target X Y resolution output raster. single value provided, used X Y resolution; 2 values provided, error thrown. extent Numeric length 4, representing target xmin, ymin, xmax, ymax values output raster (bounding box), order. reference_raster position (index) raster rasters take extent, resolution, CRS information . reprojection done. resolution extent provided, override values reference raster. resampling_method method use resampling different resolutions VRT. band_names Either character vector band names, function given character vector band names, returns character vector length containing new band names. gdalwarp_options Options passed gdalwarp options argument sf::gdal_utils(). argument ignored (warning) output_filename VRT. gdal_config_options Options passed gdalwarp config_options argument sf::gdal_utils().  argument ignored (warning) output_filename VRT.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/stack_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and save a multi-band output raster by combining input rasters — stack_rasters","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/reference/stack_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and save a multi-band output raster by combining input rasters — stack_rasters","text":"","code":"stack_rasters(   list(     system.file(\"rasters/dpdd.tif\", package = \"rsi\"),     system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\")   ),   tempfile(fileext = \".vrt\") ) #> [1] \"/tmp/Rtmp0jKhDJ/file1b8625975721.vrt\""},{"path":"https://permian-global-research.github.io/rsi/dev/news/index.html","id":"rsi-development-version","dir":"Changelog","previous_headings":"","what":"rsi (development version)","title":"rsi (development version)","text":"get_stac_data() now removes colons (:) file names generated composite_function = NULL. means datetimes now generally formatted YYYY-MM-DDTHHMMSSZ, slightly dissatisfying valid path Windows systems (#29, #32). stacK_rasters() longer includes \"-r\", \"bilinear\" default value gdalwarp_options (#27, #30). get_stac_data() now provides informative error 0 items found given query (#26, #31).","code":""},{"path":"https://permian-global-research.github.io/rsi/dev/news/index.html","id":"rsi-010","dir":"Changelog","previous_headings":"","what":"rsi 0.1.0","title":"rsi 0.1.0","text":"CRAN release: 2024-01-10 Initial CRAN submission.","code":""}]
