[{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rsi","title":"Contributing to rsi","text":"document outlines propose change rsi.","code":""},{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rsi","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to rsi","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to rsi","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"Permian-Global-Research/rsi\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to rsi","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://permian-global-research.github.io/rsi/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rsi","text":"Please note rsi project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://permian-global-research.github.io/rsi/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with rsi","title":"Getting help with rsi","text":"Thanks using rsi! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://permian-global-research.github.io/rsi/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with rsi","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://permian-global-research.github.io/rsi/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with rsi","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://permian-global-research.github.io/rsi/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with rsi","text":"efficient possible, package development tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://permian-global-research.github.io/rsi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Mahoney. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://permian-global-research.github.io/rsi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mahoney M (2023). rsi: Utilities Retrieving Satellite Imagery, Calculating Spectral Indices, Wrangling Outputs. https://github.com/Permian-Global-Research/rsi, https://permian-global-research.github.io/rsi/.","code":"@Manual{,   title = {rsi: Utilities for Retrieving Satellite Imagery, Calculating Spectral Indices, and Wrangling the Outputs},   author = {Michael Mahoney},   year = {2023},   note = {https://github.com/Permian-Global-Research/rsi, https://permian-global-research.github.io/rsi/}, }"},{"path":"https://permian-global-research.github.io/rsi/index.html","id":"rsi-","dir":"","previous_headings":"","what":"Utilities for Retrieving Satellite Imagery, Calculating Spectral\n    Indices, and Wrangling the Outputs","title":"Utilities for Retrieving Satellite Imagery, Calculating Spectral\n    Indices, and Wrangling the Outputs","text":"goal rsi address several repeated spatial infelicities, providing utility functions save typing help avoid repetitive stress injuries. Specifically, rsi provides: interface Rsome – excuse , Awesome Spectral Indices project, providing list indices directly R friendly tibble, method efficiently calculating awesome spectral indices using local rasters, enabling rapid spectral inference, method downloading STAC data – excuse , retriving STAC information – STAC server, additional helpers downloading Landsat, Sentinel-1, Sentinel-2 data free public STAC servers providing rapid satellite imagery, raster stack integration method combining multiple rasters containing distinct data sets single raster stack.","code":""},{"path":"https://permian-global-research.github.io/rsi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Retrieving Satellite Imagery, Calculating Spectral\n    Indices, and Wrangling the Outputs","text":"can install development version rsi GitHub :","code":"# install.packages(\"pak\") pak::pak(\"Permian-Global-Research/rsi\")"},{"path":"https://permian-global-research.github.io/rsi/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Utilities for Retrieving Satellite Imagery, Calculating Spectral\n    Indices, and Wrangling the Outputs","text":"spectral_indices() function provides tibble data Awesome Spectral Indices project: first time spectral_indices() called download --date version spectral indices JSON file, write resulting table cache file tools::R_user_dir(\"rsi\"). , spectral_indices() download new file cache older 1 day, update_cache argument TRUE, order provide --date data quickly possible. offline, spectral_indices() always fall back cache , cache file exists, (possibly --date) data file included rsi . Separately, get_stac_data() function provides generic interface downloading composite images accessible STAC catalog. instance, download cloud-masked composite Landsat’s visible layers using get_stac_data() helper functions rsi:  common use cases, however, rsi also provides helper functions provide arguments . instance, get_stac_data() call simple :  default, functions download data Microsoft’s Planetary Computer API, using number configuration options set rsi_band_mapping objects provided package. can see default configuration options printing band mapping objects, can adjust arguments get_* function package. can put pieces together calculate many spectral indices can based downloaded Landsat imagery. calculate_indices() function, well, calculates indices, using subsets spectral_indices() data frame:  last least, rsi includes utility efficiently combining rasters containing different data location VRT, allows programs like GDAL treat separate data sources single file. instance, can combine Landsat imagery derived indices:  can extremely useful way create predictor bricks multi-band rasters various data sources.","code":"library(rsi)  spectral_indices() #> # A tibble: 231 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 221 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 1000)  landsat_image <- get_stac_data(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-06-30\",   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = c(\"red\", \"blue\", \"green\"),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"landsat-c2-l2\",   query_function = query_planetary_computer,   sign_function = sign_planetary_computer,   mask_band = \"qa_pixel\",   mask_function = landsat_mask_function,   item_filter_function = landsat_platform_filter,   platforms = c(\"landsat-9\", \"landsat-8\") )  terra::plot(terra::rast(landsat_image)) landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   output_filename = tempfile(fileext = \".tif\") ) terra::plot(terra::rast(landsat_image)) landsat_band_mapping$planetary_computer_v1 #> An rsi band mapping object with attributes: #> names mask_band mask_function stac_source collection_name query_function sign_function class #>  #> coastal    blue   green     red   nir08  swir16  swir22    lwir  lwir11  #>     \"A\"     \"B\"     \"G\"     \"R\"     \"N\"    \"S1\"    \"S2\"     \"T\"    \"T1\" available_indices <- filter_bands(   bands = names(terra::rast(landsat_image)) )  indices <- calculate_indices(   landsat_image,   available_indices,   output_filename = tempfile(fileext = \".tif\") )  # Plot the first handful of spatial indices terra::plot(terra::rast(indices)) raster_stack <- stack_rasters(   c(landsat_image, indices),   tempfile(fileext = \".vrt\") )  # The first few panels are now Landsat measurements, not indices: terra::plot(terra::rast(raster_stack))"},{"path":"https://permian-global-research.github.io/rsi/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Utilities for Retrieving Satellite Imagery, Calculating Spectral\n    Indices, and Wrangling the Outputs","text":"Copyright 2023 Permian Global Research, Limited. Licensed Apache License, Version 2.0 (“License”); may use file except compliance License. may obtain copy License : http://www.apache.org/licenses/LICENSE-2.0 Unless required applicable law agreed writing, software distributed License distributed “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied. See License specific language governing permissions limitations License.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate indices from the bands of a raster — calculate_indices","title":"Calculate indices from the bands of a raster — calculate_indices","text":"function computes number indices input raster via terra::predict(). default, function designed work subsets spectral_indices(), work data frame formula, bands, short_name column.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate indices from the bands of a raster — calculate_indices","text":"","code":"calculate_indices(raster, indices, output_filename, ..., names_suffix = NULL)"},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate indices from the bands of a raster — calculate_indices","text":"raster raster (either SpatRaster object readable terra::rast()) compute indices . indices data frame indices compute. intent function work subsets spectral_indices, data frame columns formula (containing string representation equation used calculate index), bands (list column containing character vectors necessary bands) short_name (used band name) work. output_filename filename write computed metrics . ... dots future extensions must empty. names_suffix NULL, used (paste()) add suffix band names returned.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate indices from the bands of a raster — calculate_indices","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":"security","dir":"Reference","previous_headings":"","what":"Security","title":"Calculate indices from the bands of a raster — calculate_indices","text":"Note function running code formula column spectral indices data frame, derived JSON file downloaded internet. impossible attacker take advantage run arbitrary code computer. mitigate , indices calculated minimal environment contains functions symbols (preventing attacker accessing, example, system()). Still, good practice inspect formula column make sure nothing nasty hiding formulas going run. Additionally, consider using pre-saved indices tables spectral_indices(download_indices = FALSE) using unsupervised workload.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/calculate_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate indices from the bands of a raster — calculate_indices","text":"","code":"calculate_indices(   system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\"),   filter_platforms(platforms = \"Sentinel-1 (Dual Polarisation VV-VH)\"),   tempfile(fileext = \".tif\"),   names_suffix = \"sentinel1\" ) #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> [1] \"/tmp/Rtmp5t89wE/file1cb116e81c5d.tif\"  # Formulas aren't able to access most R functions or operators: example_indices <- filter_platforms(platforms = \"Sentinel-1 (Dual Polarisation VV-VH)\")[1, ] #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. example_indices$formula <- 'system(\"echo something bad\")' try(   calculate_indices(     system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\"),     example_indices,     tempfile(fileext = \".tif\")   ) ) #> Error in system(\"echo something bad\") : could not find function \"system\""},{"path":"https://permian-global-research.github.io/rsi/reference/dem_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Landsat band mapping — dem_band_mapping","title":"Landsat band mapping — dem_band_mapping","text":"object structured slightly differently band mapping objects; list named lists, whose names correspond DEM collections available within given STAC catalog. named lists standard band mapping objects, containing character vectors names corresponding asset names values equal elevation.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/dem_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landsat band mapping — dem_band_mapping","text":"","code":"dem_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/reference/dem_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landsat band mapping — dem_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/dem_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landsat band mapping — dem_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter indices based on (relatively) complicated fields — filter_platforms","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"Filter indices based (relatively) complicated fields","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"","code":"filter_platforms(   indices = spectral_indices(),   platforms = unique(unlist(spectral_indices(download_indices = FALSE, update_cache =     FALSE)$platforms)),   operand = c(\"all\", \"any\") )  filter_bands(   indices = spectral_indices(),   bands = unique(unlist(spectral_indices(download_indices = FALSE, update_cache =     FALSE)$bands)),   operand = c(\"all\", \"any\"),   type = c(\"filter\", \"search\") )"},{"path":"https://permian-global-research.github.io/rsi/reference/filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"indices data frame filter. Must contain relevant column. platforms, bands Names instruments (platforms) spectra (bands) indices must contain. operand function defining apply filter. instance, operand = means index must contain platforms bands provided, operand = means index must contain least one platforms bands provided. type type query ? filter, indices returned /bands use (depending operand) bands. search, indices returned /bands bands use.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"filtered version indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter indices based on (relatively) complicated fields — filter_platforms","text":"","code":"filter_platforms(platforms = \"Sentinel-2\") #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> # A tibble: 198 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 188 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> filter_platforms(platforms = c(\"Landsat-OLI\", \"Sentinel-2\")) #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> # A tibble: 158 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  5 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  6 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  7 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #>  8 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #>  9 burn               <chr [2]> https://gith… 2021-04-07       1.0 / … Burned A… #> 10 burn               <chr [2]> https://gith… 2022-04-20       1.0/((… Burned A… #> # ℹ 148 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr> filter_bands(bands = c(\"R\", \"N\"), operand = any) #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> # A tibble: 176 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  5 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  6 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  7 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  8 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #>  9 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> 10 burn               <chr [2]> https://gith… 2021-04-07       1.0 / … Burned A… #> # ℹ 166 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr>"},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and composite images from STAC endpoints — get_stac_data","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"function retrieves composites satellite images STAC endpoints. get_stac_data() generic function able download composite images variety data sources, helper functions useful defaults downloading common data sets standard STAC sources.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"","code":"get_stac_data(   aoi,   start_date,   end_date,   pixel_x_size = 30,   pixel_y_size = 30,   asset_names,   stac_source,   collection,   query_function,   ...,   sign_function = NULL,   rescale_bands = TRUE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = c(\"median\", \"mean\", \"sum\", \"min\", \"max\"),   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_sentinel1_imagery(   aoi,   start_date,   end_date,   ...,   pixel_x_size = 10,   pixel_y_size = 10,   asset_names = sentinel1_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_sentinel2_imagery(   aoi,   start_date,   end_date,   ...,   pixel_x_size = 10,   pixel_y_size = 10,   asset_names = sentinel2_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = attr(asset_names, \"mask_band\"),   mask_function = attr(asset_names, \"mask_function\"),   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_landsat_imagery(   aoi,   start_date,   end_date,   ...,   platforms = c(\"landsat-9\", \"landsat-8\"),   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = landsat_band_mapping$planetary_computer_v1,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = TRUE,   item_filter_function = landsat_platform_filter,   mask_band = attr(asset_names, \"mask_band\"),   mask_function = attr(asset_names, \"mask_function\"),   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"median\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )  get_dem(   aoi,   ...,   start_date = NULL,   end_date = NULL,   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = dem_band_mapping$planetary_computer_v1$`cop-dem-glo-30`,   stac_source = attr(asset_names, \"stac_source\"),   collection = attr(asset_names, \"collection_name\"),   query_function = attr(asset_names, \"query_function\"),   sign_function = attr(asset_names, \"sign_function\"),   rescale_bands = FALSE,   item_filter_function = NULL,   mask_band = NULL,   mask_function = NULL,   output_filename = paste0(proceduralnames::make_english_names(1), \".tif\"),   composite_function = \"max\",   limit = 999,   gdalwarp_options = c(\"-r\", \"bilinear\", \"-multi\", \"-overwrite\", \"-co\",     \"COMPRESS=DEFLATE\", \"-co\", \"PREDICTOR=2\", \"-co\", \"NUM_THREADS=ALL_CPUS\"),   gdal_config_options = c(VSI_CACHE = \"TRUE\", GDAL_CACHEMAX = \"30%\", VSI_CACHE_SIZE =     \"10000000\", GDAL_HTTP_MULTIPLEX = \"YES\", GDAL_INGESTED_BYTES_AT_OPEN = \"32000\",     GDAL_DISABLE_READDIR_ON_OPEN = \"EMPTY_DIR\", GDAL_HTTP_VERSION = \"2\",     GDAL_HTTP_MERGE_CONSECUTIVE_RANGES = \"YES\", GDAL_NUM_THREADS = \"ALL_CPUS\") )"},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"aoi sf(c) object outlining area interest get imagery . used get bounding box used calculating metrics output data's CRS. start_date, end_date Character length 1: first last date, respectively, imagery include metrics calculations. YYYY-MM-DD format. pixel_x_size, pixel_y_size Numeric length 1: size pixels x-direction (longitude / easting) y-direction (latitude / northing). asset_names names assets download. vector names, names vector assumed names assets STAC server, renamed elements vector final output. stac_source Character length 1: STAC URL download imagery . collection Character length 1: STAC collection download images . query_function function takes output rstac::stac_search() executes request. See query_planetary_computer() query_function slots sentinel1_band_mapping, sentinel2_band_mapping, landsat_band_mapping. ... Passed item_filter_functiion. sign_function function takes output query_function signs item URLs, necessary. rescale_bands Logical length 1: STAC collection implements raster STAC extension, extension includes scale offset values, function attempt automatically rescale downloaded data? item_filter_function function takes outputs query_function (usually STACItemCollection) ... returns filtered STACItemCollection. used, example, download images specific Landsat platforms. mask_band Character length 1: name asset STAC source use mask data. Set NULL mask. See mask_band slots sentinel1_band_mapping, sentinel2_band_mapping, landsat_band_mapping. mask_function function takes raster returns boolean raster, TRUE pixels preserved FALSE NA pixels masked . See sentinel2_mask_function(). output_filename filename write output raster . composite_function NULL, item datetimes appended order create unique filenames. composite_function Character length 1: name function used combine downloaded images single composite (.e., aggregate pixel values multiple images single value). Must one \"sum\", \"mean\", \"median\", \"min\", \"max\". Set NULL composite (.e., rescale save individual image independently). limit integer defining maximum number results return. informed, defaults service implementation. gdalwarp_options Options passed gdalwarp options argument sf::gdal_utils(). set options used downloaded data final output images; means common options (instance, PREDICTOR=3) may cause errors bands varying data types. gdal_config_options Options passed gdalwarp config_options argument sf::gdal_utils(). platforms names Landsat satellites download imagery . correspond platforms column spectral_indices(); default argument c(\"landsat-9\", \"landsat-8\") corresponds Landsat-OLI value column.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"usage-tips","dir":"Reference","previous_headings":"","what":"Usage Tips","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"often useful buffer aoi object slightly, order 1-2 cell widths, order ensure data downloaded entire AOI even accounting reprojection needed compare AOI data STAC server. function allows parallelizing downloads via future::plan(), user-controlled progress updates via progressr::handlers(). fewer images download asset_names, function uses lapply() iterate images future.apply::future_mapply() iterate downloading asset. images assets, function uses future.apply::future_lapply() iterate images. number steps involved creating composites -- rescaling band values, running mask function, masking images, compositing images -- currently rely terra package raster calculations. means creating larger composites, either geographic temporal dimension, may cause errors. can good idea tile aoi using sf::st_make_grid() iterate tiles avoid errors (make easier interrupt restart download job). currently challenges certain Landsat images Planetary Computer; please see https://github.com/microsoft/PlanetaryComputer/discussions/101 information images current status. files may cause data downloads fail.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"rescaling","dir":"Reference","previous_headings":"","what":"Rescaling","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"rescale_bands TRUE, function able use scale offset values bands field raster STAC extension. implemented originally work Landsat collections Planetary Computer STAC catalogue, hopefully work automatically data sources well. Note Sentinel-2 data typically use STAC extension, returned data typically re-scaled; divide downloaded band values 10000 get reflectance values expected values.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"sentinel-data","dir":"Reference","previous_headings":"","what":"Sentinel-1 Data","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"get_sentinel1_data() function designed download Sentinel-1 data Microsoft Planetary Computer STAC API. GRD RTC Sentinel-1 collections supported. download RTC data, set collection sentinel-1-rtc, supply subscription key environment variable named rsi_pc_key (, e.g., Sys.setenv() .Renviron file).","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/get_stac_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and composite images from STAC endpoints — get_stac_data","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  get_stac_data(aoi,   start_date = \"2022-06-01\",   end_date = \"2022-06-30\",   pixel_x_size = 30,   pixel_y_size = 30,   asset_names = c(     \"red\", \"blue\", \"green\"   ),   stac_source = \"https://planetarycomputer.microsoft.com/api/stac/v1/\",   collection = \"landsat-c2-l2\",   query_function = query_planetary_computer,   sign_function = sign_planetary_computer,   mask_band = \"qa_pixel\",   mask_function = landsat_mask_function,   item_filter_function = landsat_platform_filter,   platforms = c(\"landsat-9\", \"landsat-8\") )  # or, mostly equivalently (will download more bands): landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\" ) }"},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Landsat band mapping — landsat_band_mapping","title":"Landsat band mapping — landsat_band_mapping","text":"object named list character vectors, names corresponding Landsat band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landsat band mapping — landsat_band_mapping","text":"","code":"landsat_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landsat band mapping — landsat_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landsat band mapping — landsat_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_mask_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Landsat mask raster from the QA band — landsat_mask_function","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"Create Landsat mask raster QA band","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_mask_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"","code":"landsat_mask_function(raster)"},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_mask_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"raster QA band Landsat image","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_mask_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"boolean raster used mask Landsat image","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_mask_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Landsat mask raster from the QA band — landsat_mask_function","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   mask_function = landsat_mask_function ) }"},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_platform_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Landsat features to only specific platforms — landsat_platform_filter","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"Filter Landsat features specific platforms","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_platform_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"","code":"landsat_platform_filter(items, platforms)"},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_platform_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"items STACItemCatalog containing number features platforms vector acceptable platforms, instance landsat-9. Note refers satellite names, platforms spectral_indices().","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_platform_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"STACItemCollection.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/landsat_platform_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Landsat features to only specific platforms — landsat_platform_filter","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   item_filter_function = landsat_platform_filter ) }"},{"path":"https://permian-global-research.github.io/rsi/reference/query_planetary_computer.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","title":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","text":"Execute sign STAC queries Planetary Computer","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/query_planetary_computer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","text":"","code":"query_planetary_computer(q, subscription_key = Sys.getenv(\"rsi_pc_key\"))  sign_planetary_computer(items, subscription_key = Sys.getenv(\"rsi_pc_key\"))"},{"path":"https://permian-global-research.github.io/rsi/reference/query_planetary_computer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","text":"q query object rstac::stac_search(). subscription_key Optionally, subscription key associated Planetary Computer account. time writing, required downloading Sentinel 1 RTC products, well NAIP imagery. key automatically used environment variable rsi_pc_key set. items items returned query_planetary_computer.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/query_planetary_computer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","text":"STACItemCollection object signed assets url.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/query_planetary_computer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute and sign STAC queries against the Planetary Computer — query_planetary_computer","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  landsat_image <- get_landsat_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   query_function = query_planetary_computer ) }"},{"path":"https://permian-global-research.github.io/rsi/reference/rsi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rsi: Utilities for Retrieving Satellite Imagery, Calculating Spectral Indices, and Wrangling the Outputs — rsi-package","title":"rsi: Utilities for Retrieving Satellite Imagery, Calculating Spectral Indices, and Wrangling the Outputs — rsi-package","text":"Tools downloading spatial data spatiotemporal asset catalogs ('STAC') computing standard spectral indices raster data.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/rsi/reference/rsi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rsi: Utilities for Retrieving Satellite Imagery, Calculating Spectral Indices, and Wrangling the Outputs — rsi-package","text":"Maintainer: Michael Mahoney mike.mahoney.218@gmail.com (ORCID) contributors: Permian Global [copyright holder, funder]","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel1_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Sentinel-1 band mapping — sentinel1_band_mapping","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"object named list character vectors, names corresponding Sentinel-1 band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel1_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"","code":"sentinel1_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel1_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"object class list length 1.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel1_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sentinel-1 band mapping — sentinel1_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_band_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Sentinel-2 band mapping — sentinel2_band_mapping","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"object named list character vectors, names corresponding Sentinel-2 band names values corresponding band names spectral_indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_band_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"","code":"sentinel2_band_mapping"},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_band_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"object class list length 3.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_band_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sentinel-2 band mapping — sentinel2_band_mapping","text":"Band mapping objects: objects semi-standardized sets metadata provide necessary information downloading data given STAC server. object list character vectors, whose names represent asset names given STAC server whose values represent corresponding standardized band name Awesome Spectral Indices project. addition data, vectors usually (necessarily ) following attributes: stac_source: URL STAC server metadata corresponds . collection_name: default STAC collection data source. download_function: function used download assets STAC server. mask_band: name asset server used masking images. mask_function: function used mask images downloaded server.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_mask_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"Create Sentinel-2 mask raster SCL band","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_mask_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"","code":"sentinel2_mask_function(raster)"},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_mask_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"raster SCL band Sentinel-2 image","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_mask_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"boolean raster used mask Sentinel-2 image","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/sentinel2_mask_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Sentinel-2 mask raster from the SCL band — sentinel2_mask_function","text":"","code":"if (FALSE) { # interactive() aoi <- sf::st_point(c(-74.912131, 44.080410)) aoi <- sf::st_set_crs(sf::st_sfc(aoi), 4326) aoi <- sf::st_buffer(sf::st_transform(aoi, 5070), 100)  sentinel2_image <- get_sentinel2_imagery(   aoi,   start_date = \"2022-06-01\",   end_date = \"2022-08-30\",   mask_function = sentinel2_mask_function ) }"},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a data frame of spectral indices — spectral_indices","title":"Get a data frame of spectral indices — spectral_indices","text":"function returns data frame spectral indices, awesome-spectral-indices repository.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a data frame of spectral indices — spectral_indices","text":"","code":"spectral_indices(   ...,   url = spectral_indices_url(),   download_indices = NULL,   update_cache = NULL )"},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get a data frame of spectral indices — spectral_indices","text":"https://github.com/awesome-spectral-indices/awesome-spectral-indices","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a data frame of spectral indices — spectral_indices","text":"... dots future extensions must empty. url URL download spectral indices . option rsi_url set, value used; otherwise, environment variable rsi_url set, value used; otherwise, list https://github.com/awesome-spectral-indices/awesome-spectral-indices used. download_indices Logical: function download indices? NULL, function download indices cache updated. TRUE, function attempt download indices matter . FALSE, either cached package indices used. update_cache Logical: cached indices updated? NULL, cached values updated cache older day. TRUE, cache updated, FALSE .","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a data frame of spectral indices — spectral_indices","text":"tibble::tibble nine columns, containing information spectral indices.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a data frame of spectral indices — spectral_indices","text":"","code":"spectral_indices() #> Warning: Failed to download new indices. #> ℹ Returning (likely outdated) package data instead. #> # A tibble: 231 × 9 #>    application_domain bands     contributor   date_of_addition formula long_name #>    <chr>              <list>    <chr>         <chr>            <chr>   <chr>     #>  1 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  2 vegetation         <chr [2]> https://gith… 2021-11-17       (N - 0… Aerosol … #>  3 water              <chr [6]> https://gith… 2022-09-22       (B + G… Augmente… #>  4 vegetation         <chr [2]> https://gith… 2021-09-20       (1 / G… Anthocya… #>  5 vegetation         <chr [3]> https://gith… 2022-04-08       N * ((… Anthocya… #>  6 vegetation         <chr [4]> https://gith… 2021-05-11       (N - (… Atmosphe… #>  7 vegetation         <chr [4]> https://gith… 2021-05-14       sla * … Adjusted… #>  8 vegetation         <chr [2]> https://gith… 2022-04-08       (N * (… Advanced… #>  9 water              <chr [4]> https://gith… 2021-09-18       4.0 * … Automate… #> 10 water              <chr [5]> https://gith… 2021-09-18       B + 2.… Automate… #> # ℹ 221 more rows #> # ℹ 3 more variables: platforms <list>, reference <chr>, short_name <chr>"},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the URL to download spectral indices from — spectral_indices_url","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"Get URL download spectral indices ","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"","code":"spectral_indices_url()"},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"URL download indices .","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/spectral_indices_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the URL to download spectral indices from — spectral_indices_url","text":"","code":"spectral_indices_url() #> [1] \"https://raw.githubusercontent.com/awesome-spectral-indices/awesome-spectral-indices/main/output/spectral-indices-dict.json\""},{"path":"https://permian-global-research.github.io/rsi/reference/stack_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and save a multi-band VRT by combining input rasters — stack_rasters","title":"Create and save a multi-band VRT by combining input rasters — stack_rasters","text":"function creates VRT \"stacks\" bands input rasters, though loaded one another GIS. VRT fast create require much space, require input rasters moved altered. Run sf::gdal_utils(\"warp\", output_filename, \"some_path.tif\") turn output VRT standalone TIF file.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/stack_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and save a multi-band VRT by combining input rasters — stack_rasters","text":"","code":"stack_rasters(   rasters,   output_filename,   ...,   resolution,   extent,   reference_raster = 1,   resampling_method = \"bilinear\",   band_names )"},{"path":"https://permian-global-research.github.io/rsi/reference/stack_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and save a multi-band VRT by combining input rasters — stack_rasters","text":"rasters list rasters combine single multi-band raster, either SpatRaster objects terra::rast() character file paths files can read terra::rast(). Rasters \"stacked\" upon one another, preserving values. must share CRS. output_filename location save final \"stacked\" raster. Must VRT file. ... dots future extensions must empty. resolution Numeric length 2, representing target X Y resolution output raster. single value provided, used X Y resolution; 2 values provided, error thrown. extent Numeric length 4, representing target xmin, ymin, xmax, ymax values output raster (bounding box), order. reference_raster position (index) raster rasters take extent, resolution, CRS information . reprojection done. resolution extent provided, override values reference raster. resampling_method method use resampling different resolutions. band_names Either character vector band names, function given character vector band names, returns character vector length containing new band names.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/stack_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and save a multi-band VRT by combining input rasters — stack_rasters","text":"output_filename, unchanged.","code":""},{"path":"https://permian-global-research.github.io/rsi/reference/stack_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and save a multi-band VRT by combining input rasters — stack_rasters","text":"","code":"stack_rasters(   list(     system.file(\"rasters/dpdd.tif\", package = \"rsi\"),     system.file(\"rasters/example_sentinel1.tif\", package = \"rsi\")   ),   tempfile(fileext = \".vrt\") ) #> [1] \"/tmp/Rtmp5t89wE/file1cb1197a8b58.vrt\""},{"path":"https://permian-global-research.github.io/rsi/news/index.html","id":"rsi-development-version","dir":"Changelog","previous_headings":"","what":"rsi (development version)","title":"rsi (development version)","text":"Initial CRAN submission.","code":""}]
